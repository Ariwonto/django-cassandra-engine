{
    "docs": [
        {
            "location": "/", 
            "text": "django-cassandra-engine docs\n\n\nIMPORTANT: Users of versions \n0.6.0, please read this before upgrading!\n\n\ndjango-cassandra-engine\n=0.6.0 uses python-driver\n=0.3.0\nYou should read \n\nUpgrade Guide\n\nbefore installing the new version!\n\n\nOverview\n\n\ndjango-cassandra-engine\n is a database wrapper for \nDjango Framework\n.\nIt uses latest \nCqlengine\n, which is currently the best Cassandra CQL 3 Object\nMapper for Python.\n\n\n\n\nFeatures\n\n\n\n\nworking \nflush\n, \nsyncdb\n, \nmigrate\n, \nsync_cassandra\n, \ninspectdb\n and \n  \ndbshell\n commands\n\n\nsupport for creating/destroying test database\n\n\naccepts all \nCqlengine\n and \ncassandra.cluster.Cluster\n connection options\n\n\nautomatic connection/disconnection handling\n\n\nworks well along with relational databases\n\n\n\n\n\n\nRequirements\n\n\n\n\nPython\n=2.7\n\n\nCassandra\n=2.0 (of course)\n\n\ncassandra-driver\n=2.5\n\n\nDjango\n=1.5\n\n\n\n\n\n\nDownload\n\n\nGithub\n\n\nPyPi\n\n\n\n\nInstallation\n\n\nYou can install it easily from PyPi by single command:\n\n\npip install django-cassandra-engine\n\n\n\nor clone source code and run:\n\n\npython setup.py install\n\n\n\n\n\nGetting started\n\n\n\n\nAdd django-cassandra-engine to \nINSTALLED_APPS\n in your settings.py file:\nINSTALLED_APPS = ('django_cassandra_engine',) + INSTALLED_APPS\n\n\n\n\n\n\n\nIMPORTANT\n: This app should be \nthe first app\n on \nINSTALLED_APPS\n list.\nThis rule applies only to Django \n= 1.7.\n\n\n\n\n\n\nChange \nDATABASES\n setting:\n\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django_cassandra_engine',\n        'NAME': 'db',\n        'TEST_NAME': 'test_db',\n        'HOST': 'db1.example.com,db2.example.com',\n        'OPTIONS': {\n            'replication': {\n                'strategy_class': 'SimpleStrategy',\n                'replication_factor': 1\n            }\n        }\n    }\n}\n\n\n\n\n\n\n\nDefine some model(s):\n\n\n#  myapp/models.py\nimport uuid\nfrom cassandra.cqlengine import columns\nfrom cassandra.cqlengine.models import Model\n\nclass ExampleModel(Model):\n    example_id      = columns.UUID(primary_key=True, default=uuid.uuid4)\n    example_type    = columns.Integer(index=True)\n    created_at      = columns.DateTime()\n    description     = columns.Text(required=False)\n\n\n\n\n\n\n\nRun \n./manage.py sync_cassandra\n in order to sync your models with Cassandra.\n\n\n\n\n\n\nThats all!\n\n\n\n\n\n\n\n\nAdvanced usage\n\n\nSometimes you want to use cassandra database along with your relational database.\nThis is also possible! Just define your \nDATABASES\n like here:\n\n\nfrom cassandra import ConsistencyLevel\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    },\n    'cassandra': {\n        'ENGINE': 'django_cassandra_engine',\n        'NAME': 'db',\n        'USER': 'user',\n        'PASSWORD': 'pass',\n        'TEST_NAME': 'test_db',\n        'HOST': '127.0.0.1',\n        'OPTIONS': {\n            'replication': {\n                'strategy_class': 'SimpleStrategy',\n                'replication_factor': 1\n            },\n            'connection': {\n                'consistency': ConsistencyLevel.LOCAL_ONE,\n                'retry_connect': True\n                # + All connection options for cassandra.cluster.Cluster()\n            },\n            'session': {\n                'default_timeout': 10,\n                'default_fetch_size': 10000\n                # + All options for cassandra.cluster.Session()\n            }\n        }\n    }\n}\n\n\n\nThen run \n./manage.py syncdb\n for your regular database and\n\n./manage.py sync_cassandra\n or \n./manage.py syncdb --database cassandra\n\nfor Cassandra DB.\n\n\nAll \ncassandra.cluster.Cluster\n and \ncassandra.cluster.Session\n options are well described\n\n\n    here\n\n.\n\n\n\n\nUsing internal authorization\n\n\nIf you want to use\n\n\n    internal authorization\n\n\njust provide \nUSER\n and \nPASSWORD\n in cassandra's database alias.\n\n\n...\n'cassandra' {\n    'ENGINE': 'django_cassandra_engine',\n    'NAME': 'db',\n    'USER': 'user',\n    'PASSWORD': 'pass'\n}\n\n\n\nYou can also pass custom\n\n\n    auth_provider\n\n\nto \nconnection\n dict:\n\n\n...\n'connection': {\n    'consistency': ConsistencyLevel.LOCAL_ONE,\n    'retry_connect': True,\n    'port': 9042,\n    'auth_provider': PlainTextAuthProvider(username='user', password='password')\n    # + All connection options for cassandra.cluster.Cluster()\n}\n\n\n\n\n\nWriting tests\n\n\nYou can write tests the way you used to. Just subclass \ndjango.test.TestCase\n\nif \ndjango_cassandra_engine\n is your primary (default) database backend.\n\n\nIf not, just use \ndjango_cassandra_engine.test.TestCase\n.\n\n\n\n\nPerforming raw database queries\n\n\nYou might need to perform queries that don't map cleanly to models,\nor directly execute \nUPDATE\n, \nINSERT\n, or \nDELETE\n queries.\n\n\nIn these cases, you can always access the database directly,\nrouting around the model layer entirely:\n\n\nfrom django.db import connection\ncursor = connection.cursor()\nresult = cursor.execute(\"SELECT COUNT(*) FROM users\")\nprint result[0]['count']\n\n\n\n\n\nQuick access to dbshell via cqlsh\n\n\nIf you need to perform raw CQL query on your keyspace just run:\n\n\n$ python manage.py dbshell                                                                                                                                                                master \nConnected to Test Cluster at 127.0.0.1:9042.\n[cqlsh 5.0.1 | Cassandra 2.1.4 | CQL spec 3.2.0 | Native protocol v3]\nUse HELP for help.\ncqlsh:your_keyspace\n\n\n\n\nIt will connect directly to your database using credentials from settings.py.\nIf the database has multiple Cassandra hosts in settings.py, dbshell attempts\nto connect to the host that is listed first.\n\n\n\n\nWorking with source code and running tests\n\n\ngit clone https://github.com/r4fek/django-cassandra-engine.git\ncd django_cassandra_engine\n# mkvirtualenv cassengine\npip install -r requirements-dev.txt\npython setup.py install\npython setup.py test\n\n\n\n\n\nContributing\n\n\nYou are highly encouraged to participate in the development,\nsimply use GitHub's fork/pull request system.", 
            "title": "Home"
        }, 
        {
            "location": "/#django-cassandra-engine-docs", 
            "text": "IMPORTANT: Users of versions  0.6.0, please read this before upgrading!  django-cassandra-engine =0.6.0 uses python-driver =0.3.0\nYou should read  Upgrade Guide \nbefore installing the new version!", 
            "title": "django-cassandra-engine docs"
        }, 
        {
            "location": "/#overview", 
            "text": "django-cassandra-engine  is a database wrapper for  Django Framework .\nIt uses latest  Cqlengine , which is currently the best Cassandra CQL 3 Object\nMapper for Python.", 
            "title": "Overview"
        }, 
        {
            "location": "/#features", 
            "text": "working  flush ,  syncdb ,  migrate ,  sync_cassandra ,  inspectdb  and \n   dbshell  commands  support for creating/destroying test database  accepts all  Cqlengine  and  cassandra.cluster.Cluster  connection options  automatic connection/disconnection handling  works well along with relational databases", 
            "title": "Features"
        }, 
        {
            "location": "/#requirements", 
            "text": "Python =2.7  Cassandra =2.0 (of course)  cassandra-driver =2.5  Django =1.5", 
            "title": "Requirements"
        }, 
        {
            "location": "/#download", 
            "text": "Github  PyPi", 
            "title": "Download"
        }, 
        {
            "location": "/#installation", 
            "text": "You can install it easily from PyPi by single command:  pip install django-cassandra-engine  or clone source code and run:  python setup.py install", 
            "title": "Installation"
        }, 
        {
            "location": "/#getting-started", 
            "text": "Add django-cassandra-engine to  INSTALLED_APPS  in your settings.py file: INSTALLED_APPS = ('django_cassandra_engine',) + INSTALLED_APPS    IMPORTANT : This app should be  the first app  on  INSTALLED_APPS  list.\nThis rule applies only to Django  = 1.7.    Change  DATABASES  setting:  DATABASES = {\n    'default': {\n        'ENGINE': 'django_cassandra_engine',\n        'NAME': 'db',\n        'TEST_NAME': 'test_db',\n        'HOST': 'db1.example.com,db2.example.com',\n        'OPTIONS': {\n            'replication': {\n                'strategy_class': 'SimpleStrategy',\n                'replication_factor': 1\n            }\n        }\n    }\n}    Define some model(s):  #  myapp/models.py\nimport uuid\nfrom cassandra.cqlengine import columns\nfrom cassandra.cqlengine.models import Model\n\nclass ExampleModel(Model):\n    example_id      = columns.UUID(primary_key=True, default=uuid.uuid4)\n    example_type    = columns.Integer(index=True)\n    created_at      = columns.DateTime()\n    description     = columns.Text(required=False)    Run  ./manage.py sync_cassandra  in order to sync your models with Cassandra.    Thats all!", 
            "title": "Getting started"
        }, 
        {
            "location": "/#advanced-usage", 
            "text": "Sometimes you want to use cassandra database along with your relational database.\nThis is also possible! Just define your  DATABASES  like here:  from cassandra import ConsistencyLevel\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    },\n    'cassandra': {\n        'ENGINE': 'django_cassandra_engine',\n        'NAME': 'db',\n        'USER': 'user',\n        'PASSWORD': 'pass',\n        'TEST_NAME': 'test_db',\n        'HOST': '127.0.0.1',\n        'OPTIONS': {\n            'replication': {\n                'strategy_class': 'SimpleStrategy',\n                'replication_factor': 1\n            },\n            'connection': {\n                'consistency': ConsistencyLevel.LOCAL_ONE,\n                'retry_connect': True\n                # + All connection options for cassandra.cluster.Cluster()\n            },\n            'session': {\n                'default_timeout': 10,\n                'default_fetch_size': 10000\n                # + All options for cassandra.cluster.Session()\n            }\n        }\n    }\n}  Then run  ./manage.py syncdb  for your regular database and ./manage.py sync_cassandra  or  ./manage.py syncdb --database cassandra \nfor Cassandra DB.  All  cassandra.cluster.Cluster  and  cassandra.cluster.Session  options are well described \n    here .", 
            "title": "Advanced usage"
        }, 
        {
            "location": "/#using-internal-authorization", 
            "text": "If you want to use \n    internal authorization \njust provide  USER  and  PASSWORD  in cassandra's database alias.  ...\n'cassandra' {\n    'ENGINE': 'django_cassandra_engine',\n    'NAME': 'db',\n    'USER': 'user',\n    'PASSWORD': 'pass'\n}  You can also pass custom \n    auth_provider \nto  connection  dict:  ...\n'connection': {\n    'consistency': ConsistencyLevel.LOCAL_ONE,\n    'retry_connect': True,\n    'port': 9042,\n    'auth_provider': PlainTextAuthProvider(username='user', password='password')\n    # + All connection options for cassandra.cluster.Cluster()\n}", 
            "title": "Using internal authorization"
        }, 
        {
            "location": "/#writing-tests", 
            "text": "You can write tests the way you used to. Just subclass  django.test.TestCase \nif  django_cassandra_engine  is your primary (default) database backend.  If not, just use  django_cassandra_engine.test.TestCase .", 
            "title": "Writing tests"
        }, 
        {
            "location": "/#performing-raw-database-queries", 
            "text": "You might need to perform queries that don't map cleanly to models,\nor directly execute  UPDATE ,  INSERT , or  DELETE  queries.  In these cases, you can always access the database directly,\nrouting around the model layer entirely:  from django.db import connection\ncursor = connection.cursor()\nresult = cursor.execute(\"SELECT COUNT(*) FROM users\")\nprint result[0]['count']", 
            "title": "Performing raw database queries"
        }, 
        {
            "location": "/#quick-access-to-dbshell-via-cqlsh", 
            "text": "If you need to perform raw CQL query on your keyspace just run:  $ python manage.py dbshell                                                                                                                                                                master \nConnected to Test Cluster at 127.0.0.1:9042.\n[cqlsh 5.0.1 | Cassandra 2.1.4 | CQL spec 3.2.0 | Native protocol v3]\nUse HELP for help.\ncqlsh:your_keyspace   It will connect directly to your database using credentials from settings.py.\nIf the database has multiple Cassandra hosts in settings.py, dbshell attempts\nto connect to the host that is listed first.", 
            "title": "Quick access to dbshell via cqlsh"
        }, 
        {
            "location": "/#working-with-source-code-and-running-tests", 
            "text": "git clone https://github.com/r4fek/django-cassandra-engine.git\ncd django_cassandra_engine\n# mkvirtualenv cassengine\npip install -r requirements-dev.txt\npython setup.py install\npython setup.py test", 
            "title": "Working with source code and running tests"
        }, 
        {
            "location": "/#contributing", 
            "text": "You are highly encouraged to participate in the development,\nsimply use GitHub's fork/pull request system.", 
            "title": "Contributing"
        }, 
        {
            "location": "/faq/", 
            "text": "Troubleshooting\n\n\nQ:  \nsyncdb\n only creates a keyspace..\n\n\nA: Please make sure that \ndjango_cassandra_engine\n is \n\nthe first application\n in \nINSTALLED_APPS\n list.\n\n\nQ:  Is it possible to use it with Celery?\n\n\nA: Short answer: YES.\n\n\nIf you use \ndjango_cassandra_engine\n as your default backend:\n\n\n# project/tasks.py\nfrom celery.signals import worker_init\nfrom django.db import connection\n\n@worker_process_init.connect\ndef connect_db(**kwargs):\n    connection.reconnect()\n\n\n\nOr if 'cassandra' is your secondary DB alias:\n\n\nfrom django.db import connections\nconnection = connections['cassandra']\n\n@worker_process_init.connect\ndef connect_db(**kwargs):\n    connection.reconnect()\n\n\n\nQ: is uWSGI supported?\n\n\nA: Yes, uWSGI is supported by default. \nIt works best with \nretry_connect\n set to \nTrue\n.", 
            "title": "FAQ"
        }, 
        {
            "location": "/faq/#troubleshooting", 
            "text": "", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/faq/#q-syncdb-only-creates-a-keyspace", 
            "text": "A: Please make sure that  django_cassandra_engine  is  the first application  in  INSTALLED_APPS  list.", 
            "title": "Q:  syncdb only creates a keyspace.."
        }, 
        {
            "location": "/faq/#q-is-it-possible-to-use-it-with-celery", 
            "text": "A: Short answer: YES.  If you use  django_cassandra_engine  as your default backend:  # project/tasks.py\nfrom celery.signals import worker_init\nfrom django.db import connection\n\n@worker_process_init.connect\ndef connect_db(**kwargs):\n    connection.reconnect()  Or if 'cassandra' is your secondary DB alias:  from django.db import connections\nconnection = connections['cassandra']\n\n@worker_process_init.connect\ndef connect_db(**kwargs):\n    connection.reconnect()", 
            "title": "Q:  Is it possible to use it with Celery?"
        }, 
        {
            "location": "/faq/#q-is-uwsgi-supported", 
            "text": "A: Yes, uWSGI is supported by default. \nIt works best with  retry_connect  set to  True .", 
            "title": "Q: is uWSGI supported?"
        }, 
        {
            "location": "/changelog/", 
            "text": "CHANGELOG\n\n\nVersion 0.6.2 (08.12.2015)\n\n\n\n\nSupport Django==1.9\n\n\n\n\nVersion 0.6.1 (07.12.2015)\n\n\n\n\nFix \nCassandraConnection.setup\n method (thanks @mateuszm!)\n\n\n\n\nVersion 0.6.0 (25.11.2015)\n\n\n\n\nUpdate cassandra-driver to 0.3.0\n\n\n\n\nVersion 0.5.2 (04.10.2015)\n\n\n\n\nUpdate cassandra-driver to 2.7.2\n\n\n\n\nVersion 0.5.1 (14.09.2015)\n\n\n\n\nfix #44: Fix migrate command when working in a multi db environment (by @paksu)\n\n\n\n\nVersion 0.5.0 (26.08.2015)\n\n\n\n\nFix \nCassandraDatabaseFeatures.supports_transactions\n (thanks @slurms)\n\n\nUpdate cassandra-driver to 2.7.1\n\n\n\n\nVersion 0.4.0 (21.07.2015)\n\n\n\n\nUpdate cassandra-driver to 2.6.0\n\n\n\n\nVersion 0.3.4 (01.07.2015)\n\n\n\n\nSet Session attributes in class instead of local instance (by @mateuszm)\n\n\n\n\nVersion 0.3.3 (25.05.2015)\n\n\n\n\nRemovedInDjango19Warnings when using Django \n= 1.7 (by @paksu)\n\n\nset session.default_consistency_level\n\n\n\n\nVersion 0.3.2 (04.05.2015)\n\n\n\n\nupgrade cassandra-driver to 2.5.1\n\n\n\n\nVersion 0.3.1 (10.04.2015)\n\n\n\n\nfix #30: Add support for Django\n=1.8\n\n\nremove djangotoolbox dependency\n\n\nfix #21: Python 3 compatibility\n\n\n\n\nVersion 0.3.0 (03.04.2015)\n\n\n\n\nfix #29: Update to use integrated cqlengine via cassandra-driver\n=2.5.0\n  (by @mbeacom and @r4fek)\n\n\n\n\nVersion 0.2.3 (25.03.2015)\n\n\n\n\nfix #15: test database not used by code under test (by @lsmithso)\n\n\nfix #25: working fixtures in \ndjango_cassandra_engine.test.TestCase\n \n  (by @slurms)\n\n\n\n\nVersion 0.2.2 (19.01.2015)\n\n\n\n\nadd support for Django==1.5\n\n\nadd support for Django\n=1.7.2\n\n\nadd \nget_engine_from_db_alias\n util function\n\n\n\n\nVersion 0.2.1 (16.01.2015)\n\n\n\n\nupdate cqlengine to 0.21.0\n\n\nmove syncing code to \nsync_cassandra\n command\n\n\nRefactor test runner\n\n\nseparate settings modules to make testing easier\n\n\nnew test application: \nmultiapp\n\n\nnew \nget_cassandra_connections\n function to return list of all\n  cassandra conncetions defined in DATABASES setting\n\n\nget_cassandra_connection\n now accepts alias and name parameters\n\n\nget_cql_models\n now returns models for given keyspace\n\n\n\n\nVersion 0.1.8 (13.12.2014)\n\n\n\n\nadd working \nCursor\n implementation\n\n\nability to perform raw CQL queries\n\n\nimprove support for Django 1.7\n\n\npresent \nget_cassandra_connection\n helper\n\n\nadd more tests\n\n\n\n\nVersion 0.1.7 (24.11.2014)\n\n\n\n\nrevert broken consistency fix (thanks to @danandersonasc)\n\n\n\n\nVersion 0.1.6 (24.11.2014)\n\n\n\n\nfix passing proper consistency option to \ncqlengine.setup\n\n\nadd more tests\n\n\nbump cqlengine to 0.20.0\n\n\n\n\nVersion 0.1.5 (17.11.2014)\n\n\n\n\nability to set \ncassandra.cluster.Session\n options like \ndefault_timeout\n\n(thanks @danpilch)\n\n\n\n\nVersion 0.1.4 (01.11.2014)\n\n\n\n\nadd support for authorization (thanks to @drivard)\n\n\n\n\nVersion 0.1.3 (20.10.2014)\n\n\n\n\nmore tests for Connection class\n\n\npresesnt \nsync_cassandra\n management command\n\n\n\n\nVersion 0.1.2 (20.10.2014)\n\n\n\n\nadd support for uWSGI\n\n\n\n\nVersion 0.1.1 (17.10.2014)\n\n\n\n\nfix exceptions in Django 1.7\n\n\noverride migrate and runserver commands\n\n\n\n\nVersion 0.1.0 (08.10.2014)\n\n\n\n\nChange status to \nProduction/Stable\n\n\nBump cqlengine to v.0.19\n\n\nUpdate docs\n\n\n\n\nVersion 0.0.7 (02.10.2014)\n\n\n\n\nSupport for more connection options (thanks to @mwiewiorski)\n\n\n\n\nVersion 0.0.6 (03.09.2014)\n\n\n\n\nAdd support for Django 1.7\n\n\n\n\nVersion 0.0.5 (29.08.2014)\n\n\n\n\nImproved models discovery\n\n\nCall the standard syncdb if the engine is not django_cassandra_engine\n  (thanks to @ratm)\n\n\nTravis integration\n\n\n\n\nVersion 0.0.4 (22.08.2014)\n\n\n\n\nFeature: add support for \nflush\n management command\n\n\nBugfix: lock dependencies in setup.py\n\n\nadd more tests\n\n\n\n\nVersion 0.0.3 (21.08.2014)\n\n\n\n\nBugfix: Fix some issue in \nflush\n command (add dummy support for Django 1.6.6)\n\n\n\n\nVersion 0.0.2 (04.08.2014)\n\n\n\n\nBugfix: Do not reconnect on every request\n\n\n\n\nVersion 0.0.1 (31.07.2014)\n\n\n\n\nFeature: allow to define cassandra backend in settings.py\n\n\nFeature: connect to the Cassandra database automatically on app startup\n\n\nFeature: \nsyncdb\n management command\n\n\nFeature: support for django test framework\n\n\nFeature: Support for Cqlengine Object Mapper", 
            "title": "Changelog"
        }, 
        {
            "location": "/changelog/#changelog", 
            "text": "", 
            "title": "CHANGELOG"
        }, 
        {
            "location": "/changelog/#version-062-08122015", 
            "text": "Support Django==1.9", 
            "title": "Version 0.6.2 (08.12.2015)"
        }, 
        {
            "location": "/changelog/#version-061-07122015", 
            "text": "Fix  CassandraConnection.setup  method (thanks @mateuszm!)", 
            "title": "Version 0.6.1 (07.12.2015)"
        }, 
        {
            "location": "/changelog/#version-060-25112015", 
            "text": "Update cassandra-driver to 0.3.0", 
            "title": "Version 0.6.0 (25.11.2015)"
        }, 
        {
            "location": "/changelog/#version-052-04102015", 
            "text": "Update cassandra-driver to 2.7.2", 
            "title": "Version 0.5.2 (04.10.2015)"
        }, 
        {
            "location": "/changelog/#version-051-14092015", 
            "text": "fix #44: Fix migrate command when working in a multi db environment (by @paksu)", 
            "title": "Version 0.5.1 (14.09.2015)"
        }, 
        {
            "location": "/changelog/#version-050-26082015", 
            "text": "Fix  CassandraDatabaseFeatures.supports_transactions  (thanks @slurms)  Update cassandra-driver to 2.7.1", 
            "title": "Version 0.5.0 (26.08.2015)"
        }, 
        {
            "location": "/changelog/#version-040-21072015", 
            "text": "Update cassandra-driver to 2.6.0", 
            "title": "Version 0.4.0 (21.07.2015)"
        }, 
        {
            "location": "/changelog/#version-034-01072015", 
            "text": "Set Session attributes in class instead of local instance (by @mateuszm)", 
            "title": "Version 0.3.4 (01.07.2015)"
        }, 
        {
            "location": "/changelog/#version-033-25052015", 
            "text": "RemovedInDjango19Warnings when using Django  = 1.7 (by @paksu)  set session.default_consistency_level", 
            "title": "Version 0.3.3 (25.05.2015)"
        }, 
        {
            "location": "/changelog/#version-032-04052015", 
            "text": "upgrade cassandra-driver to 2.5.1", 
            "title": "Version 0.3.2 (04.05.2015)"
        }, 
        {
            "location": "/changelog/#version-031-10042015", 
            "text": "fix #30: Add support for Django =1.8  remove djangotoolbox dependency  fix #21: Python 3 compatibility", 
            "title": "Version 0.3.1 (10.04.2015)"
        }, 
        {
            "location": "/changelog/#version-030-03042015", 
            "text": "fix #29: Update to use integrated cqlengine via cassandra-driver =2.5.0\n  (by @mbeacom and @r4fek)", 
            "title": "Version 0.3.0 (03.04.2015)"
        }, 
        {
            "location": "/changelog/#version-023-25032015", 
            "text": "fix #15: test database not used by code under test (by @lsmithso)  fix #25: working fixtures in  django_cassandra_engine.test.TestCase  \n  (by @slurms)", 
            "title": "Version 0.2.3 (25.03.2015)"
        }, 
        {
            "location": "/changelog/#version-022-19012015", 
            "text": "add support for Django==1.5  add support for Django =1.7.2  add  get_engine_from_db_alias  util function", 
            "title": "Version 0.2.2 (19.01.2015)"
        }, 
        {
            "location": "/changelog/#version-021-16012015", 
            "text": "update cqlengine to 0.21.0  move syncing code to  sync_cassandra  command  Refactor test runner  separate settings modules to make testing easier  new test application:  multiapp  new  get_cassandra_connections  function to return list of all\n  cassandra conncetions defined in DATABASES setting  get_cassandra_connection  now accepts alias and name parameters  get_cql_models  now returns models for given keyspace", 
            "title": "Version 0.2.1 (16.01.2015)"
        }, 
        {
            "location": "/changelog/#version-018-13122014", 
            "text": "add working  Cursor  implementation  ability to perform raw CQL queries  improve support for Django 1.7  present  get_cassandra_connection  helper  add more tests", 
            "title": "Version 0.1.8 (13.12.2014)"
        }, 
        {
            "location": "/changelog/#version-017-24112014", 
            "text": "revert broken consistency fix (thanks to @danandersonasc)", 
            "title": "Version 0.1.7 (24.11.2014)"
        }, 
        {
            "location": "/changelog/#version-016-24112014", 
            "text": "fix passing proper consistency option to  cqlengine.setup  add more tests  bump cqlengine to 0.20.0", 
            "title": "Version 0.1.6 (24.11.2014)"
        }, 
        {
            "location": "/changelog/#version-015-17112014", 
            "text": "ability to set  cassandra.cluster.Session  options like  default_timeout \n(thanks @danpilch)", 
            "title": "Version 0.1.5 (17.11.2014)"
        }, 
        {
            "location": "/changelog/#version-014-01112014", 
            "text": "add support for authorization (thanks to @drivard)", 
            "title": "Version 0.1.4 (01.11.2014)"
        }, 
        {
            "location": "/changelog/#version-013-20102014", 
            "text": "more tests for Connection class  presesnt  sync_cassandra  management command", 
            "title": "Version 0.1.3 (20.10.2014)"
        }, 
        {
            "location": "/changelog/#version-012-20102014", 
            "text": "add support for uWSGI", 
            "title": "Version 0.1.2 (20.10.2014)"
        }, 
        {
            "location": "/changelog/#version-011-17102014", 
            "text": "fix exceptions in Django 1.7  override migrate and runserver commands", 
            "title": "Version 0.1.1 (17.10.2014)"
        }, 
        {
            "location": "/changelog/#version-010-08102014", 
            "text": "Change status to  Production/Stable  Bump cqlengine to v.0.19  Update docs", 
            "title": "Version 0.1.0 (08.10.2014)"
        }, 
        {
            "location": "/changelog/#version-007-02102014", 
            "text": "Support for more connection options (thanks to @mwiewiorski)", 
            "title": "Version 0.0.7 (02.10.2014)"
        }, 
        {
            "location": "/changelog/#version-006-03092014", 
            "text": "Add support for Django 1.7", 
            "title": "Version 0.0.6 (03.09.2014)"
        }, 
        {
            "location": "/changelog/#version-005-29082014", 
            "text": "Improved models discovery  Call the standard syncdb if the engine is not django_cassandra_engine\n  (thanks to @ratm)  Travis integration", 
            "title": "Version 0.0.5 (29.08.2014)"
        }, 
        {
            "location": "/changelog/#version-004-22082014", 
            "text": "Feature: add support for  flush  management command  Bugfix: lock dependencies in setup.py  add more tests", 
            "title": "Version 0.0.4 (22.08.2014)"
        }, 
        {
            "location": "/changelog/#version-003-21082014", 
            "text": "Bugfix: Fix some issue in  flush  command (add dummy support for Django 1.6.6)", 
            "title": "Version 0.0.3 (21.08.2014)"
        }, 
        {
            "location": "/changelog/#version-002-04082014", 
            "text": "Bugfix: Do not reconnect on every request", 
            "title": "Version 0.0.2 (04.08.2014)"
        }, 
        {
            "location": "/changelog/#version-001-31072014", 
            "text": "Feature: allow to define cassandra backend in settings.py  Feature: connect to the Cassandra database automatically on app startup  Feature:  syncdb  management command  Feature: support for django test framework  Feature: Support for Cqlengine Object Mapper", 
            "title": "Version 0.0.1 (31.07.2014)"
        }
    ]
}